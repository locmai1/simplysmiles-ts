generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  isAdmin       Boolean   @default(false)
  fosterIds     String[]  @db.ObjectId
  foster        Foster[]  @relation(fields: [fosterIds], references: [id])
  expenses      Expense[]
}

model Budget {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  celebration     Int    
  clothes         Int    
  culturalDev     Int    
  management      Int    
  education       Int    
  household       Int    
  overnightTravel Int    
  recreational    Int    
  vehicle         Int
  foster          Foster?
}

model Expense {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  vendor   String
  date     DateTime @default(now())
  amount   Int       
  account  String
  payment  String
  memo     String
  userId   String   @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  fosterId String   @db.ObjectId
  foster   Foster   @relation(fields: [fosterId], references: [id], onDelete: Cascade)
}

model Foster {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userIds    String[]  @db.ObjectId
  user       User[]    @relation(fields: [userIds], references: [id])
  budgetId   String    @unique @db.ObjectId
  budget     Budget    @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  expenses   Expense[]
  name       String    @unique
}
